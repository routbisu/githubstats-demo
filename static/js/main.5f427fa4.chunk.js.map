{"version":3,"sources":["components/Header/ProfileSection/ProfileSection.js","actions/authActions.js","actions/types.js","components/Header/Header.js","components/PageContent/UserDetails/UserDetails.js","components/PageContent/LoginForm/LoginForm.js","components/PageContent/PageContent.js","reducers/authReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["ProfileSection","user","this","props","userDetails","react_default","a","createElement","className","src","avatar_url","alt","name","onClick","logout","Component","connect","username","dispatch","type","Header","isLoggedIn","Header_ProfileSection_ProfileSection","state","authState","userData","UserDetails","rowSpan","width","company","location","public_repos","bio","LoginForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","evt","setState","target","value","userLogin","e","preventDefault","login","loginFailed","onSubmit","placeholder","onChange","axios","get","concat","then","res","payload","data","catch","err","PageContent","PageContent_UserDetails_UserDetails","PageContent_LoginForm_LoginForm","onLogin","onLoginHandler","initialState","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","compose","applyMiddleware","thunk","App","console","log","onLogoutHandler","es","components_Header_Header","onLogout","components_PageContent_PageContent","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f427fa4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { logout } from \"../../../actions/authActions\";\nimport \"./ProfileSection.scss\";\n\nclass ProfileSection extends Component {\n  render() {\n    const user = this.props.userDetails;\n\n    return (\n      <div className=\"profile-section\">\n        <img src={user.avatar_url} alt={user.name} className=\"profile-avatar\" />\n        <span className=\"user-name\">\n          {user.name}\n          <span onClick={this.props.logout}>Logout</span>\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { logout }\n)(ProfileSection);\n","import { LOGIN, LOGOUT, LOGIN_FAILED } from \"../actions/types\";\nimport axios from \"axios\";\n\n// user login using github API\nexport const login = username => dispatch => {\n  axios\n    .get(`https://api.github.com/users/${username}`)\n    .then(res => {\n      // Make a callback to the parent with user details from api\n      dispatch({\n        type: LOGIN,\n        payload: res.data\n      });\n    })\n    .catch(err => {\n      // Show a error message for failed login\n      dispatch({\n        type: LOGIN_FAILED\n      });\n    });\n};\n\n// User logout\nexport const logout = username => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};\n","// Authentication actions\nexport const LOGIN = \"LOGIN\";\nexport const LOGIN_FAILED = \"LOGIN_FAILED\";\nexport const LOGOUT = \"LOGOUT\";\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./Header.scss\";\nimport ProfileSection from \"./ProfileSection/ProfileSection\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <span className=\"main-header\">Github Stats</span>\n        {this.props.isLoggedIn ? (\n          <ProfileSection userDetails={this.props.userDetails} />\n        ) : null}\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoggedIn: state.authState.isLoggedIn,\n  userDetails: state.authState.userData\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Header);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./UserDetails.scss\";\n\nclass UserDetails extends Component {\n  render() {\n    const user = this.props.userDetails;\n\n    return (\n      <div className=\"user-details\">\n        <table>\n          <tbody>\n            <tr>\n              <td rowSpan=\"4\" width=\"10%\">\n                <img\n                  src={user.avatar_url}\n                  className=\"avatar-pic\"\n                  alt={user.name}\n                />\n              </td>\n              <th>Name</th>\n              <td>{user.name}</td>\n            </tr>\n            <tr>\n              <th>Company</th>\n              <td>{user.company}</td>\n            </tr>\n            <tr>\n              <th>Location</th>\n              <td>{user.location}</td>\n            </tr>\n            <tr>\n              <th>Repositories</th>\n              <td>{user.public_repos}</td>\n            </tr>\n          </tbody>\n        </table>\n        <div className=\"user-bio\">{user.bio}</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  userDetails: state.authState.userData\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(UserDetails);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../../actions/authActions\";\n\nimport \"./LoginForm.scss\";\n\nclass LoginForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username: \"\"\n    };\n  }\n\n  onChangeHandler = evt => {\n    this.setState({ username: evt.target.value });\n  };\n\n  userLogin = e => {\n    e.preventDefault();\n    this.props.login(this.state.username);\n  };\n\n  render() {\n    return (\n      <div className=\"login-form\">\n        {this.props.loginFailed ? (\n          <div className=\"err-message\">Username not found.</div>\n        ) : null}\n\n        <form onSubmit={this.userLogin}>\n          <input\n            type=\"text\"\n            placeholder=\"Github username\"\n            onChange={this.onChangeHandler}\n          />\n          <button className=\"btn-login\" type=\"submit\">\n            Login\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  loginFailed: state.authState.loginFailed\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    login\n  }\n)(LoginForm);\n","import React, { Component } from \"react\";\nimport UserDetails from \"./UserDetails/UserDetails\";\nimport LoginForm from \"./LoginForm/LoginForm\";\nimport { connect } from \"react-redux\";\n\nclass PageContent extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.isLoggedIn ? (\n          <UserDetails />\n        ) : (\n          <LoginForm onLogin={this.onLoginHandler} />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoggedIn: state.authState.isLoggedIn\n});\n\nexport default connect(\n  mapStateToProps,\n  {}\n)(PageContent);\n","import { LOGIN, LOGOUT, LOGIN_FAILED } from \"../actions/types\";\n\nconst initialState = {\n  isLoggedIn: false,\n  loginFailed: false,\n  userData: null\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    // Show list of top 10 movies\n    case LOGIN:\n      return {\n        ...state,\n        userData: action.payload,\n        isLoggedIn: true\n      };\n\n    case LOGOUT:\n      return { ...state, isLoggedIn: false, userData: null };\n\n    case LOGIN_FAILED:\n      return { ...state, loginFailed: true };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport authReducer from \"./authReducer\";\n\nexport default combineReducers({\n  authState: authReducer\n});\n","import { applyMiddleware, createStore, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\n// Initial state\nconst initialState = {};\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__\n    ? compose(\n        applyMiddleware(thunk),\n        window.__REDUX_DEVTOOLS_EXTENSION__()\n      )\n    : applyMiddleware(thunk)\n);\n\nexport default store;\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Header from \"./components/Header/Header\";\nimport PageContent from \"./components/PageContent/PageContent\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isLoggedIn: false,\n      userDetails: null\n    };\n  }\n\n  onLoginHandler = userDetails => {\n    console.log(\"UD\", userDetails);\n    this.setState({ userDetails: userDetails, isLoggedIn: true });\n  };\n\n  onLogoutHandler = () => {\n    this.setState({ isLoggedIn: false, userDetails: null });\n  };\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Header\n            isLoggedIn={this.state.isLoggedIn}\n            userDetails={this.state.userDetails}\n            onLogout={this.onLogoutHandler}\n          />\n          <PageContent />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}